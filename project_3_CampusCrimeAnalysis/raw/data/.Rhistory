ystar <- sample(y, n, replace = T)
vstar <- median(xstar) - mean(ystar)
if (vstar > v) p = p + 1
}
p <- p / b
list(v = v,pval = p,vstar = vstar)
}
res = percentciboot3(x, y, 10000)
res$v
res$pval
percentciboot3 <- function(x, y, b){
v <- mean(x) - mean(y)
vstar <- rep(0, b)
p <- 0
n <- length(x)
for(i in 1:b) {
xstar <- sample(x, n, replace = T)
ystar <- sample(y, n, replace = T)
vstar[i] <- median(xstar) - mean(ystar)
if (vstar > v) p = p + 1
}
p <- p / b
list(v = v,pval = p,vstar = vstar)
}
x = c(23.5, 12., 21., 22., 19.125, 21.5, 22.125,
20.375, 18.25, 21.625, 23.25, 21., 22.125, 23., 12.)
y = c(17.375, 20.375, 20., 20., 18.375, 18.625,
18.625, 15.25, 16.5, 18., 16.25, 18., 12.75, 15.5, 18.)
res = percentciboot3(x, y, 10000)
warning()
warnings()
warnings
percentciboot3 <- function(x, y, b){
v <- mean(x) - mean(y)
vstar <- rep(0, b)
p <- 0
n <- length(x)
for(i in 1:b) {
xstar <- sample(x, n, replace = T)
ystar <- sample(y, n, replace = T)
vstar[i] <- median(xstar) - mean(ystar)
if (vstar[i] > v) p = p + 1
}
p <- p / b
list(v = v,pval = p,vstar = vstar)
}
res = percentciboot3(x, y, 10000)
res$v
res$pval
percentciboot3 <- function(x, y, b){
v <- mean(x) - mean(y)
vstar <- rep(0, b)
p <- 0
n <- length(x)
for(i in 1:b) {
xstar <- sample(x, n, replace = T)
ystar <- sample(y, n, replace = T)
vstar[i] <- mean(xstar - ystar)
if (vstar[i] >= v) p = p + 1
}
p <- p / b
list(v = v,pval = p,vstar = vstar)
}
res = percentciboot3(x, y, 10000)
res$v
res$pval
percentciboot3 <- function(x, y, b){
v <- mean(x) - mean(y)
dxy <- x - y - v
vstar <- rep(0, b)
p <- 0
n <- length(x)
for(i in 1:b) {
dxystar <- sample(dxy, n, replace = TRUE)
vstar[i] <- mean(dxystar)
if (vstar[i] >= v) p = p + 1
}
p <- p / b
list(v = v,pval = p,vstar = vstar)
}
res = percentciboot3(x, y, 10000)
res$v
res$pval
library(shiny)
library(shinyFiles)
runGitHub("SAM", "MikeJSeo")
install.packages(c("samr", "matrixStats", "GSA", "shiny", "shinyFiles", "openxlsx"))
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
install.packages(c("samr", "matrixStats", "GSA", "shiny", "shinyFiles",
"openxlsx"))
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
library(shiny)
library(shinyFiles)
runGitHub("SAM", "MikeJSeo")
library(shinyFiles)
runGitHub("SAM", "MikeJSeo")
library(shiny)
library(shinyFiles)
runGitHub("SAM", "MikeJSeo")
install.packages("shinyFiles")
install.packages("shinyFiles")
library("shinyFiles")
library("shiny")
runGitHub("SAM", "MikeJSeo")
y = 2
lambda = 2
betas = seq(-10, 10, 0.1)
func = (y - betas)**2 + lambda * betas^2
plot(betas, func)
beta_hat = y / (1 + lambda)
func_hat = (y - beta_hat)**2 + lambda * beta**2
points(beta_hat, func_hat)
func_hat = (y - beta_hat)**2 + lambda * beta**2
func = (y - betas)**2 + lambda * betas**2
plot(betas, func)
beta_hat = y / (1 + lambda)
func_hat = (y - beta_hat)**2 + lambda * beta**2
y = 2
lambda = 2
betas = seq(-10, 10, 0.1)
func = (y - betas)**2 + lambda * (betas**2)
plot(betas, func)
beta_hat = y / (1 + lambda)
func_hat = (y - beta_hat)**2 + lambda * beta**2
points(beta_hat, func_hat)
func_hat = (y - beta_hat)**2 + lambda * (beta**2)
points(beta_hat, func_hat)
points(beta_hat, func_hat, col = "red", pch = 4, lwd = 5, cex = est.beta)
y = 2
lambda = 2
betas = seq(-10, 10, 0.1)
func = (y - betas)^2 + lambda * (betas^2)
plot(betas, func)
beta_hat = y / (1 + lambda)
func_hat = (y - beta_hat)^2 + lambda * (beta^2)
points(beta_hat, func_hat, col = "red", pch = 4, lwd = 5, cex = est.beta)
func_hat = (y - beta_hat)^2 + lambda * (beta_hat^2)
points(beta_hat, func_hat, col = "red", pch = 4, lwd = 5, cex = est.beta)
points(beta_hat, func_hat, col = "red", pch = 4, lwd = 5)
y = 2
lambda = 2
betas = seq(-3, 3, 0.01)
func = (y - betas)^2 + lambda * abs(betas)
plot(betas, func)
beta_hat = y - lambda/2
func_hat = (y - beta_hat)^2 + lambda * abs(beta_hat)
points(beta_hat, func_hat, col = "red")
points(beta_hat, func_hat, col = "red", pch = 4, lwd = 5)
set.seed(1)
p = 20
n = 1000
x = matrix(rnorm(n * p), n, p)
P = rnorm(p)
P[3] = 0; P[4] = 0; P[9] = 0; P[19] = 0; P[10] = 0
eps = rnorm(p)
y = x %*% P + eps
set.seed(1)
p = 20
n = 1000
x = matrix(rnorm(n * p), n, p)
beta = rnorm(p)
beta[1] = 0; beta[3] = 0; beta[10] = 0; beta[25] = 0;
eps = rnorm(p)
y = x %*% beta + eps
beta = rnorm(p)
y = x %*% beta + eps
beta
beta[1] = 0; beta[3] = 0; beta[10] = 0; beta[19] = 0;
y = x %*% beta + eps
beta
train = sample(1:1000, 100)
y.train = y[train, ]
id = sample(1:1000, 100)
y.train = y[id, ]
y.test = y[-id, ]
x.train = x[id, ]
x.test = x[-id, ]
library(leaps)
fit1 = regsubsets(y ~ ., data = cbind(x.train, y.train), nvmax = p)
install.packages("leaps")
fit1 = regsubsets(y ~ ., data = cbind(x.train, y.train), nvmax = p)
library(leaps)
fit1 = regsubsets(y ~ ., data = cbind(x.train, y.train), nvmax = p)
fit1 = regsubsets(y ~ ., data = as.data.frame(cbind(x.train, y.train)), nvmax = p)
fit1 = regsubsets(y ~ ., data = data.frame(x = x.train, y = y.train), nvmax = p)
errors = rep(NA, p)
x_cols = colnames(x, do.NULL = FALSE, prefix = "x.")
for (i in 1:p) {
coefi = coef(fit1, id = i)
pred = as.matrix(x.train[, x_cols %in% names(coefi)]) %*% coefi[names(coefi) %in% x_cols]
errors[i] = mean((y.train - pred)^2)
}
plot(val.errors, type = "b")
plot(errors, type = "b")
plot(errors)
plot(errors, type = 'l')
test_errors = rep(NA, p)
for (i in 1:p) {
coefi = coef(fit1, id = i)
pred = as.matrix(x.train[, x_cols %in% names(coefi)]) %*% coefi[names(coefi) %in% x_cols]
train_errors[i] = mean((y.train - pred)^2)
test_errors[i] = mean((y.test - pred)^d)
}
plot(errors, type = 'l')
plot(train_errors, type = 'l')
plot(test_errors, type = 'l')
plot(train_errors, type = 'l')
train_errors = rep(NA, p)
test_errors = rep(NA, p)
x_cols = colnames(x, do.NULL = FALSE, prefix = "x.")
for (i in 1:p) {
coefi = coef(fit1, id = i)
pred = as.matrix(x.train[, x_cols %in% names(coefi)]) %*% coefi[names(coefi) %in% x_cols]
train_errors[i] = mean((y.train - pred)^2)
test_errors[i] = mean((y.test - pred)^2)
}
library(leaps)
fit1 = regsubsets(y ~ ., data = data.frame(x = x.train, y = y.train), nvmax = p)
train_errors = rep(NA, p)
test_errors = rep(NA, p)
x_cols = colnames(x, do.NULL = FALSE, prefix = "x.")
for (i in 1:p) {
coefi = coef(fit1, id = i)
pred = as.matrix(x.train[, x_cols %in% names(coefi)]) %*% coefi[names(coefi) %in% x_cols]
train_errors[i] = mean((y.train - pred)^2)
test_errors[i] = mean((y.test - pred)^2)
}
val.errors = rep(NA, p)
for (i in 1:p) {
coefi = coef(regfit.full, id = i)
pred = as.matrix(x.test[, x_cols %in% names(coefi)]) %*% coefi[names(coefi) %in%
x_cols]
val.errors[i] = mean((y.test - pred)^2)
}
val.errors = rep(NA, p)
for (i in 1:p) {
coefi = coef(fit1, id = i)
pred = as.matrix(x.test[, x_cols %in% names(coefi)]) %*% coefi[names(coefi) %in%
x_cols]
val.errors[i] = mean((y.test - pred)^2)
}
plot(val.errors, ylab = "Test MSE", pch = 19, type = "b")
library(leaps)
fit1 = regsubsets(y ~ ., data = data.frame(x = x.train, y = y.train), nvmax = p)
train_errors = rep(NA, p)
x_cols = colnames(x, do.NULL = FALSE, prefix = "x.")
for (i in 1:p) {
coefi = coef(fit1, id = i)
pred = as.matrix(x.train[, x_cols %in% names(coefi)]) %*% coefi[names(coefi) %in% x_cols]
train_errors[i] = mean((y.train - pred)^2)
}
plot(train_errors, type = 'l', main = 'train MSE')
test_errors = rep(NA, p)
for (i in 1:p) {
coefi = coef(fit1, id = i)
pred = as.matrix(x.test[, x_cols %in% names(coefi)]) %*% coefi[names(coefi) %in%
x_cols]
test_errors[i] = mean((y.test - pred)^2)
}
plot(test_errors, main = "Test MSE", type = 'l')
which.min(test_errors)
coef(fit, id = which.min(test_errors))
coef(fit1, id = which.min(test_errors))
errors = rep(NA, p)
xaxis = rep(NA, p)
yaxis = rep(NA, p)
for (i in 1:p) {
coefi = coef(fit1, id = i)
xaxis[i] = length(coefi) - 1
yaxis[i] = sqrt(sum((beta[x_cols %in% names(coefi)] - coefi[names(coefi) %in% x_cols])^2) + sum(beta[!(x_cols %in% names(coefi))])^2)
}
plot(x = a, y = b, xlab = "number of coefficients", ylab = "error between estimated and true coefficients")
plot(x = xaxis, y = yaxis, main = "error between estimated and true coefficients")
which.min(yaxis)
save.image("~/Untitled.RData")
gammad <- function(alpha, beta, theta) {
return ( exp(alpha * log(beta) - beta*theta + (alpha - 1)*log(theta) - lgamma(alpha)) )
}
online <- function(data, alpha0 = 2, beta0 = 0.2, theta0 = 1, n = 256) {
alpha = alpha0; beta = beta0; theta = theta0
theta = seq(0, 4, length.out = 1000)
res = matrix(theta, 1000, 1)
for (i in 1:n) {
alpha = alpha + 1
beta = beta + data[i]
if (i == 4 || i == 8 || i == 16 || i == 256) {
res = cbind(res, gammad(alpha, beta, theta))
}
}
colnames(res) = c("theta", "i4", "i8", "i16", "i256")
return(as.data.frame(res))
}
res = online(rexp(256, 1))
g = ggplot(data = res) + geom_line(data = res, aes(theta, i4, color = "n = 4")) +
geom_line(data = res, aes(theta, i8, color = "n = 8")) +
geom_line(data = res, aes(theta, i16, color = "n = 16")) +
geom_line(data = res, aes(theta, i256, color = "n = 256")) +
theme(legend.title = element_blank()) +
ylab("posterior")
g
library(ggplot2)
g = ggplot(data = res) + geom_line(data = res, aes(theta, i4, color = "n = 4")) +
geom_line(data = res, aes(theta, i8, color = "n = 8")) +
geom_line(data = res, aes(theta, i16, color = "n = 16")) +
geom_line(data = res, aes(theta, i256, color = "n = 256")) +
theme(legend.title = element_blank()) +
ylab("posterior")
g
y = rexp(100, theta)
theta = 1
y = rexp(100, theta)
res = online(y)
g = ggplot(data = res) + geom_line(data = res, aes(theta, i4, color = "n = 4")) +
geom_line(data = res, aes(theta, i8, color = "n = 8")) +
geom_line(data = res, aes(theta, i16, color = "n = 16")) +
geom_line(data = res, aes(theta, i256, color = "n = 256")) +
theme(legend.title = element_blank()) +
ylab("posterior")
g
y = rexp(200, theta)
res = online(y)
g = ggplot(data = res) + geom_line(data = res, aes(theta, i4, color = "n = 4")) +
geom_line(data = res, aes(theta, i8, color = "n = 8")) +
geom_line(data = res, aes(theta, i16, color = "n = 16")) +
geom_line(data = res, aes(theta, i256, color = "n = 256")) +
theme(legend.title = element_blank()) +
ylab("posterior")
g
theta = 1
y = rexp(256, theta)
g = ggplot(data = res) + geom_line(data = res, aes(theta, i4, color = "n = 4")) +
geom_line(data = res, aes(theta, i8, color = "n = 8")) +
geom_line(data = res, aes(theta, i16, color = "n = 16")) +
geom_line(data = res, aes(theta, i256, color = "n = 256")) +
res = online(y)
g = ggplot(data = res) + geom_line(data = res, aes(theta, i4, color = "n = 4")) +
geom_line(data = res, aes(theta, i8, color = "n = 8")) +
geom_line(data = res, aes(theta, i16, color = "n = 16")) +
geom_line(data = res, aes(theta, i256, color = "n = 256")) +
theme(legend.title = element_blank()) +
ylab("posterior")
g
```
res = online(y)
g = ggplot(data = res) + geom_line(data = res, aes(theta, i4, color = "n = 4")) +
geom_line(data = res, aes(theta, i8, color = "n = 8")) +
geom_line(data = res, aes(theta, i16, color = "n = 16")) +
geom_line(data = res, aes(theta, i256, color = "n = 256")) +
theme(legend.title = element_blank()) +
ylab("posterior")
g
pennt = data.frame(year = c(1998,1999,	2000,	2004,	2005,	2006,	2007,	2008,	2009),
penny = c(	1.3,	2.6,	4.5,	10,	15,	34,	39,	181,	223))
View(pennt)
moore = data.fram(year=c(1972,	1974,	1978,	1982,	1985,	1989,	1993,	1997,	1999,	2000,	2003,	2004),
moore = c(2.5,	5	,29,	120,	275,	,1180,	3100,	7500,	24000	,42000,	220000,	592000))
moore = data.frame(year=c(1972,	1974,	1978,	1982,	1985,	1989,	1993,	1997,	1999,	2000,	2003,	2004),
moore = c(2.5,	5	,29,	120,	275,	,1180,	3100,	7500,	24000	,42000,	220000,	592000))
moore = data.frame(year=c(1972,	1974,	1978,	1982,	1985,	1989,	1993,	1997,	1999,	2000,	2003,	2004),
moore = c(2.5,	5	,29,	120,	275,	1180,	3100,	7500,	24000	,42000,	220000,	592000))
jo = data.frame(
year = c(	2007,	2010,	2012),
joule=c(	88,	27.9,	21)
)
minute = data.frame(
year=c(	1997,	1998	,2000	,2004	,2006,	2007,	2009	,2012	,2014)
minute = c(	3.5	,5.8	,12,	34,	40	,214	,500	,1401,	3788.8)
)
minute = data.frame(
year=c(	1997,	1998	,2000	,2004	,2006,	2007,	2009	,2012	,2014),
minute = c(	3.5	,5.8	,12,	34,	40	,214	,500	,1401,	3788.8)
)
gray = data.frame(
year=c(	2014,	2013,	2011,	2009),
gray=c(	4.35,	1.42,	0.725,	0.578)
)
plot(gray$year, gray$gray)
library(ggplot2)
g = ggplot()
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute))
g
View(jo)
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute)) +
geom_line(data = jo, aes(year, joule)) +
geom_line(data = pennt, aes(year, penny)) +
geom_line(data = moore, aes(year, moore))
g
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute)) +
geom_line(data = jo, aes(year, joule)) +
geom_line(data = pennt, aes(year, penny)) +
geom_line(data = moore, aes(year, moore)) +
facet_wrap(~chrom)
g
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute)) +
geom_line(data = jo, aes(year, joule)) +
geom_line(data = pennt, aes(year, penny)) +
geom_line(data = moore, aes(year, moore)) +
facet_wrap(scales='free_y')
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute)) +
geom_line(data = jo, aes(year, joule)) +
geom_line(data = pennt, aes(year, penny)) +
geom_line(data = moore, aes(year, moore)) +
facet_wrap(~gray+minute+joule+penny+moore,scales='free_y')
g
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute)) +
geom_line(data = jo, aes(year, joule)) +
geom_line(data = pennt, aes(year, penny)) +
geom_line(data = moore, aes(year, moore)) +
facet_wrap(~gray,scales='free_y')
g
library("arm", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("reshape", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
rescaler(gray$gray, type = range)
rescaler(as.vector(gray$gray), type = range)
rescaler(as.vector(gray$gray), range)
rescaler(gray$gray, type = range)
rescaler(gray, type = range)
library("clusterSim", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data.Normalization(gray$gray, type='n4')
gray$gray = data.Normalization(gray$gray, type='n4')
minute$minute = data.Normalization(minute$minute, type = 'n4')
jo$joule = data.Normalization(jo$joule, type = 'n4')
moore$moore = data.Normalization(moore$moore, type = 'n4')
pennt$penny = data.Normalization(pennt$penny, type = 'n4')
View(gray)
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute)) +
geom_line(data = jo, aes(year, joule)) +
geom_line(data = pennt, aes(year, penny)) +
geom_line(data = moore, aes(year, moore)) +
facet_wrap(~gray,scales='free_y')
g
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute)) +
geom_line(data = jo, aes(year, joule)) +
geom_line(data = pennt, aes(year, penny)) +
geom_line(data = moore, aes(year, moore))
g
gray$gray = data.Normalization(log2(gray$gray), type='n4')
minute$minute = data.Normalization(log2(minute$minute), type = 'n4')
jo$joule = data.Normalization(log2(jo$joule), type = 'n4')
moore$moore = data.Normalization(log2(moore$moore), type = 'n4')
pennt$penny = data.Normalization(log2(pennt$penny), type = 'n4')
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute)) +
geom_line(data = jo, aes(year, joule)) +
geom_line(data = pennt, aes(year, penny)) +
geom_line(data = moore, aes(year, moore))
g
View(gray)
View(jo)
gray$gray = data.Normalization(gray$gray, type='n4')
minute$minute = data.Normalization(minute$minute, type = 'n4')
jo$joule = data.Normalization(jo$joule, type = 'n4')
moore$moore = data.Normalization(moore$moore, type = 'n4')
pennt$penny = data.Normalization(pennt$penny, type = 'n4')
library(ggplot2)
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
geom_line(data = minute, aes(year, minute)) +
geom_line(data = jo, aes(year, joule)) +
geom_line(data = pennt, aes(year, penny)) +
geom_line(data = moore, aes(year, moore))
g
g = ggplot() + geom_line(data = gray, aes(year, gray))
g
pennt = data.frame(year = c(1998,1999,	2000,	2004,	2005,	2006,	2007,	2008,	2009),
penny = c(	1.3,	2.6,	4.5,	10,	15,	34,	39,	181,	223))
moore = data.frame(year=c(1972,	1974,	1978,	1982,	1985,	1989,	1993,	1997,	1999,	2000,	2003,	2004),
moore = c(2.5,	5	,29,	120,	275,	1180,	3100,	7500,	24000	,42000,	220000,	592000))
jo = data.frame(
year = c(	2007,	2010,	2012),
joule=c(	88,	27.9,	21)
)
minute = data.frame(
year=c(	1997,	1998	,2000	,2004	,2006,	2007,	2009	,2012	,2014),
minute = c(	3.5	,5.8	,12,	34,	40	,214	,500	,1401,	3788.8)
)
gray = data.frame(
year=c(	2014,	2013,	2011,	2009),
gray=c(	4.35,	1.42,	0.725,	0.578)
)
library(ggplot2)
g = ggplot() + geom_line(data = gray, aes(year, gray))
g
g = ggplot() + geom_line(data = gray, aes(year, gray)) +
theme(axis.ticks.y = element_blank(),axis.text.y = element_blank())
g
g = ggplot() + theme(axis.ticks.y = element_blank(),axis.text.y = element_blank()) +
geom_line(data = gray, aes(year, gray))
g
g = ggplot() + theme(axis.ticks.y = element_blank(),axis.text.y = element_blank()) +
geom_line(data = minute, aes(year, minute))
g
g = ggplot() + theme(axis.ticks.y = element_blank(),axis.text.y = element_blank()) +
geom_line(data = jo, aes(year, joule))
g
g = ggplot() + theme(axis.ticks.y = element_blank(),axis.text.y = element_blank()) +
geom_line(data = pennt, aes(year, penny))
g
g = ggplot() + theme(axis.ticks.y = element_blank(),axis.text.y = element_blank()) +
geom_line(data = moore, aes(year, moore))
g
setwd("~/Documents/cuw4701_edav/project_3/data/")
library(xlsx)
